### @generated 
### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Analytics {
  tbd: String
}

type BfBlog implements BfNode & Node {
  """Unique identifier for the resource"""
  id: ID!
  name: String
  post(id: ID): BfBlogPost
  posts(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): BfBlogPostConnection
}

type BfBlogPost implements BfNode & Node {
  author: String
  content: String
  cta: String
  href: String

  """Unique identifier for the resource"""
  id: ID!
  slug: String
  summary: String
  title: String
}

type BfBlogPostConnection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [BfBlogPostEdge]

  """Flattened list of BfBlogPost type"""
  nodes: [BfBlogPost]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type BfBlogPostEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: BfBlogPost
}

type BfContentCollection implements BfNode & Node {
  description: String

  """Unique identifier for the resource"""
  id: ID!
  items(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): BfContentItemConnection
  name: String
  slug: String
}

type BfContentItem implements BfNode & Node {
  body: String
  href: String

  """Unique identifier for the resource"""
  id: ID!
  slug: String
  title: String
}

type BfContentItemConnection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [BfContentItemEdge]

  """Flattened list of BfContentItem type"""
  nodes: [BfContentItem]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type BfContentItemEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: BfContentItem
}

interface BfCurrentViewer implements Node {
  blog: BfBlog
  contentCollection(slug: String): BfContentCollection

  """Unique identifier for the resource"""
  id: ID!
  organization: BfOrganization
}

type BfCurrentViewerLoggedIn implements BfCurrentViewer & Node {
  blog: BfBlog
  contentCollection(slug: String): BfContentCollection

  """Unique identifier for the resource"""
  id: ID!
  organization: BfOrganization
}

type BfCurrentViewerLoggedOut implements BfCurrentViewer & Node {
  blog: BfBlog
  contentCollection(slug: String): BfContentCollection

  """Unique identifier for the resource"""
  id: ID!
  organization: BfOrganization
}

interface BfNode implements Node {
  """Unique identifier for the resource"""
  id: ID!
}

type BfOrganization implements BfNode & Node {
  analytics: Analytics
  creation: Creation
  distribution: Distribution

  """Unique identifier for the resource"""
  id: ID!
  identity: BfOrganization_Identity
  research: BfOrganization_Research
}

type BfOrganization_Identity {
  twitter: Twitter
  voice: Voice
}

type BfOrganization_Research {
  topics: [ResearchTopic]
}

type BfPerson implements BfNode & Node {
  """Unique identifier for the resource"""
  id: ID!
  name: String
}

type Creation {
  draftBlog: String
  originalText: String
  revisions: [Revisions]
  suggestions: [Suggestion]
}

type Distribution {
  tbd: String
}

scalar JSON

"""
A scalar that only accepts a valid JSON string. It returns the same valid JSON string on output.
"""
scalar JSONString

type Mutation {
  checkEmail(email: String!): Boolean
  createVoice(handle: String!): Voice
  getLoginOptions(email: String!): JSONString
  login(authResp: JSONString!, email: String!): BfCurrentViewer
  loginAsDemoPerson: BfCurrentViewerLoggedIn
  makeTweets(tweet: String!): Creation
  register(attResp: JSONString!, email: String!): BfCurrentViewerLoggedIn
  registrationOptions(email: String!): JSONString
  reviseBlog(blogPost: String!): Creation
  submitYcForm(formData: String, systemPrompt: String, taskPrompt: String): YCRecommendations
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  bfNode(id: ID): BfNode
  me: BfCurrentViewer
}

type RecommendationItem {
  confidence: Float
  explanation: String
  recommendedText: String
  sourceText: String
}

type Recommendations {
  """A list of recommendations"""
  recommendations: [RecommendationItem]
}

type ResearchEntry {
  name: String
  summary: String
  type: String
  url: String
}

type ResearchTopic {
  entries: [ResearchEntry]
  name: String
}

type Revisions {
  explanation: String
  original: String
  revision: String
  revisionTitle: String
}

type Suggestion {
  explanation: String
  tweet: String
}

type Twitter {
  handle: String
  imgUrl: String
  name: String
}

type Voice {
  voice: String
  voiceSummary: String
}

type YCRecommendationItem {
  confidence: Float
  explanation: String
  revision: String
}

type YCRecommendations {
  """A list of recommendations"""
  companySummary: YCRecommendationItem

  """A list of recommendations"""
  competitors: YCRecommendationItem

  """A list of recommendations"""
  equityBreakdown: YCRecommendationItem

  """A list of recommendations"""
  investmentsReceived: YCRecommendationItem

  """A list of recommendations"""
  locationDecision: YCRecommendationItem

  """A list of recommendations"""
  moneyMaking: YCRecommendationItem

  """A list of recommendations"""
  otherIdeas: YCRecommendationItem

  """A list of recommendations"""
  otherIncubators: YCRecommendationItem

  """A list of recommendations"""
  previousApplicationChange: YCRecommendationItem

  """A list of recommendations"""
  productSummary: YCRecommendationItem

  """A list of recommendations"""
  progress: YCRecommendationItem

  """A list of recommendations"""
  reasonForApplying: YCRecommendationItem

  """A list of recommendations"""
  reasonForProductChoice: YCRecommendationItem

  """A list of recommendations"""
  revenueSource: YCRecommendationItem

  """A list of recommendations"""
  techStack: YCRecommendationItem

  """A list of recommendations"""
  whoToldYou: YCRecommendationItem

  """A list of recommendations"""
  workLengthHistory: YCRecommendationItem
}